(ns {{top/ns}}.handlers
  (:require [reitit.ring]
            [reitit.ring.coercion]
            [reitit.coercion.spec]
            [reitit.coercion.malli]
            [malli.util :as mu]
            [muuntaja.core :as muuntaja]
            [reitit.ring.middleware.exception]
            [reitit.ring.middleware.parameters]
            [reitit.ring.middleware.muuntaja]
            [reitit.swagger]
            [ring.util.response :refer [response not-found created bad-request]]
            [clojure.tools.logging :as log]
            [dfornika.database :as db]
            [dfornika.repositories.users :as users-repo]))

;; Malli schemas for API validation
(def user-response-schema
  [:map
   [:pk :int]
   [:user-id :string]
   [:created-at :string]
   [:updated-at :string]])

(def create-user-request-schema
  [:map
   [:user-id :string]])

(def update-user-request-schema
  [:map
   [:user-id {:optional true} :string]])

(def users-list-response-schema
  [:vector user-response-schema])

;; Error handling helpers
(defn handle-error
  "Standard error response handler."
  [e]
  (log/error e "Request failed")
  (let [data (ex-data e)]
    (cond
      (= (:type data) :validation-error)
      (bad-request {:error "Validation failed" :details (:errors data)})

      (= (:type data) :not-found)
      (not-found {:error "Resource not found" :details (:message e)})

      :else
      {:status 500
       :body {:error "Internal server error"}})))

;; Route handlers
(defn health-handler
  "Health check endpoint."
  [_request]
  (response {:status "ok" :timestamp (java.time.Instant/now)}))

(defn create-user-handler
  "Create a new user."
  [database]
  (fn [{:keys [body-params] :as request}]
    (try
      (let [user (users-repo/create-user! database body-params)]
        (log/info "User created successfully" {:user-id (:user-id user)})
        (created (str "/api/users/" (:user-id user)) user))
      (catch Exception e
        (handle-error e)))))

(defn get-user-handler
  "Get a user by ID."
  [database]
  (fn [{{:keys [user-id]} :path-params :as request}]
    (try
      (if-let [user (users-repo/get-user-by-id database user-id)]
        (response user)
        (not-found {:error "User not found" :user-id user-id}))
      (catch Exception e
        (handle-error e)))))

(defn list-users-handler
  "List users with optional pagination."
  [database]
  (fn [{{:keys [page size]} :query-params :as request}]
    (try
      (let [opts (cond-> {}
                   page (assoc :page (Integer/parseInt page))
                   size (assoc :size (Integer/parseInt size)))
            users (users-repo/list-users database opts)
            total (users-repo/count-users database)]
        (response {:users users
                   :total total
                   :page (or (:page opts) 1)
                   :size (or (:size opts) 20)}))
      (catch Exception e
        (handle-error e)))))

(defn update-user-handler
  "Update an existing user."
  [database]
  (fn [{{:keys [user-id]} :path-params
        body-params :body-params
        :as request}]
    (try
      (users-repo/update-user! database user-id body-params)
      (let [updated-user (users-repo/get-user-by-id database user-id)]
        (response updated-user))
      (catch Exception e
        (handle-error e)))))

(defn delete-user-handler
  "Delete a user by ID."
  [database]
  (fn [{{:keys [user-id]} :path-params :as request}]
    (try
      (users-repo/delete-user! database user-id)
      (response {:message "User deleted successfully" :user-id user-id})
      (catch Exception e
        (handle-error e)))))

(defn make-routes
  "Create routes."
  [datasource]
  (let [database (db/create-database datasource)]
    [["/openapi.json"
      {:get {:no-doc true
             :swagger {:basePath "/"}
             :handler (reitit.swagger/create-swagger-handler)}}]

     ["/health"
      {:get {:summary "Health check"
             :responses {200 {:body [:map [:status :string] [:timestamp :string]]}}
             :handler health-handler}}]

     ["/api"
      ["/users"
       {:get {:summary "List users"
              :parameters {:query [:map
                                   [:page {:optional true} :string]
                                   [:size {:optional true} :string]]}
              :responses {200 {:body [:map
                                      [:users users-list-response-schema]
                                      [:total :int]
                                      [:page :int]
                                      [:size :int]]}}
              :handler (list-users-handler database)}
        :post {:summary "Create user"
               :parameters {:body create-user-request-schema}
               :responses {201 {:body user-response-schema}
                           400 {:body [:map [:error :string] [:details :any]]}}
               :handler (create-user-handler database)}}]

      ["/users/:user-id"
       {:get {:summary "Get user by ID"
              :parameters {:path [:map [:user-id :string]]}
              :responses {200 {:body user-response-schema}
                          404 {:body [:map [:error :string] [:user-id :string]]}}
              :handler (get-user-handler database)}
        :put {:summary "Update user"
              :parameters {:path [:map [:user-id :string]]
                           :body update-user-request-schema}
              :responses {200 {:body user-response-schema}
                          404 {:body [:map [:error :string]]}}
              :handler (update-user-handler database)}
        :delete {:summary "Delete user"
                 :parameters {:path [:map [:user-id :string]]}
                 :responses {200 {:body [:map [:message :string] [:user-id :string]]}
                             404 {:body [:map [:error :string]]}}
                 :handler (delete-user-handler database)}}]]

     ["/"
      {:get {:no-doc true
             :handler (fn [request]
                        (let [log-data (select-keys request [:scheme :path :request-method :headers])]
                          (log/info log-data)
                          (response {:message "Welcome to the API"
                                     :endpoints ["/health" "/api/users" "/openapi.json"]})))}}]]))

(defn make-router
  "Create router."
  [datasource]
  (reitit.ring/router
   (make-routes datasource)
   {:data {:coercion reitit.coercion.malli/coercion
           :muuntaja muuntaja/instance
           :middleware [reitit.ring.middleware.exception/exception-middleware
                        reitit.ring.middleware.parameters/parameters-middleware
                        reitit.ring.coercion/coerce-request-middleware
                        reitit.ring.coercion/coerce-response-middleware
                        reitit.ring.middleware.muuntaja/format-response-middleware]}}))

(defn root-handler
  "Main application handler."
  [datasource]
  (reitit.ring/ring-handler
   (make-router datasource)
   (reitit.ring/redirect-trailing-slash-handler {:method :strip})))